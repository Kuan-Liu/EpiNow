// Generated by rstantools.  Do not edit by hand.

/*
    EpiNow is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EpiNow is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EpiNow.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_epimodel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_epimodel");
    reader.add_event(30, 28, "end", "model_epimodel");
    return reader;
}
#include <stan_meta_header.hpp>
class model_epimodel : public prob_grad {
private:
        int t;
        int k;
        int n;
        std::vector<std::vector<int> > obs_local;
        std::vector<std::vector<double> > infectiousness;
        int tau;
        matrix_d w;
public:
    model_epimodel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_epimodel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_epimodel_namespace::model_epimodel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("obs_local", "t", t);
            validate_non_negative_index("obs_local", "k", k);
            context__.validate_dims("data initialization", "obs_local", "int", context__.to_vec(t,k));
            obs_local = std::vector<std::vector<int> >(t, std::vector<int>(k, int(0)));
            vals_i__ = context__.vals_i("obs_local");
            pos__ = 0;
            size_t obs_local_k_0_max__ = t;
            size_t obs_local_k_1_max__ = k;
            for (size_t k_1__ = 0; k_1__ < obs_local_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < obs_local_k_0_max__; ++k_0__) {
                    obs_local[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t obs_local_i_0_max__ = t;
            size_t obs_local_i_1_max__ = k;
            for (size_t i_0__ = 0; i_0__ < obs_local_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < obs_local_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "obs_local[i_0__][i_1__]", obs_local[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("infectiousness", "t", t);
            validate_non_negative_index("infectiousness", "k", k);
            context__.validate_dims("data initialization", "infectiousness", "double", context__.to_vec(t,k));
            infectiousness = std::vector<std::vector<double> >(t, std::vector<double>(k, double(0)));
            vals_r__ = context__.vals_r("infectiousness");
            pos__ = 0;
            size_t infectiousness_k_0_max__ = t;
            size_t infectiousness_k_1_max__ = k;
            for (size_t k_1__ = 0; k_1__ < infectiousness_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < infectiousness_k_0_max__; ++k_0__) {
                    infectiousness[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t infectiousness_i_0_max__ = t;
            size_t infectiousness_i_1_max__ = k;
            for (size_t i_0__ = 0; i_0__ < infectiousness_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < infectiousness_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "infectiousness[i_0__][i_1__]", infectiousness[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "tau", "int", context__.to_vec());
            tau = int(0);
            vals_i__ = context__.vals_i("tau");
            pos__ = 0;
            tau = vals_i__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("w", "n", n);
            validate_non_negative_index("w", "k", k);
            context__.validate_dims("data initialization", "w", "matrix_d", context__.to_vec(n,k));
            w = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, k);
            vals_r__ = context__.vals_r("w");
            pos__ = 0;
            size_t w_j_2_max__ = k;
            size_t w_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < w_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                    w(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 12;
            validate_non_negative_index("R", "t", t);
            num_params_r__ += (1 * t);
            current_statement_begin__ = 13;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_epimodel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 12;
        if (!(context__.contains_r("R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        validate_non_negative_index("R", "t", t);
        context__.validate_dims("parameter initialization", "R", "double", context__.to_vec(t));
        std::vector<double> R(t, double(0));
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            R[k_0__] = vals_r__[pos__++];
        }
        size_t R_i_0_max__ = t;
        for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 12;
            std::vector<local_scalar_t__> R;
            size_t R_d_0_max__ = t;
            R.reserve(R_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 13;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 18;
            for (int h = 1; h <= k; ++h) {
                current_statement_begin__ = 19;
                for (int s = (tau + 1); s <= t; ++s) {
                    current_statement_begin__ = 20;
                    for (int i = ((s - tau) + 1); i <= s; ++i) {
                        current_statement_begin__ = 21;
                        lp_accum__.add(neg_binomial_2_log(get_base1(get_base1(obs_local, i, "obs_local", 1), k, "obs_local", 2), (get_base1(R, s, "R", 1) * get_base1(get_base1(infectiousness, i, "infectiousness", 1), k, "infectiousness", 2)), (1 / stan::math::sqrt(phi))));
                    }
                }
            }
            current_statement_begin__ = 26;
            lp_accum__.add(gamma_log<propto__>(R, 1, 0.2));
            current_statement_begin__ = 27;
            lp_accum__.add(normal_log<propto__>(phi, 0, 1));
            if (phi < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R");
        names__.push_back("phi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_epimodel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> R;
        size_t R_d_0_max__ = t;
        R.reserve(R_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
            R.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            vars__.push_back(R[k_0__]);
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_epimodel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_epimodel_namespace::model_epimodel stan_model;
#endif
